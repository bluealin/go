类型定义
type IZ int
var a IZ = 5
type (
   IZ int
   FZ float64
   STR string
)

所有的结构将在这一章或接下来的章节中进一步地解释说明，但总体思路如下：

    在完成包的 import 之后，开始对常量、变量和类型的定义或声明。
    如果存在 init 函数的话，则对该函数进行定义（这是一个特殊的函数，每个含有该函数的包都会首先执行这个函数）。
    如果当前包是 main 包，则定义 main 函数。
    然后定义其余的函数，首先是类型的方法，接着是按照 main 函数中先后调用的顺序来定义相关函数，如果有很多函数，则可以按照字母顺序来进行排序
    
    Go 中不允许不同类型之间的混合使用，但是对于常量的类型限制非常少，因此允许常量之间的混合使用，下面这个程序很好地解释了这个现象（该程序无法通过编译）：
    不过如果你实际存的数字超出你要转换到的类型的取值范围的话，则会引发 panic（第 13.2 节）。
   c语言 int* a, b;。在这个例子中，只有 a 是指针而 b 不是
    var a, b *int  go   都是指针类型
    
    
    当使用等号 = 将一个变量的值赋值给另一个变量时，如：j = i，实际上是在内存中将 i 的值进行了拷贝：   python不是
    ，指针（第 4.9 节）属于引用类型，其它的引用类型还包括 slices（第 7 章），maps（第 8 章）和 channel（第 13 章）。
    被引用的变量会存储在堆中，以便进行垃圾回收，且比栈拥有更大的内存空间。
    
    a:=50
    a=20  dui
    a:=50
    a:=20 错
    
    同时，带有 ++ 和 -- 的只能作为语句，而非表达式，因此 n = i++ 这种写法是无效的，
    其它像 f(i++) 或者 a[i]=b[i++] 这些可以用于 C、C++ 和 Java 中的写法在 Go 中也是不允许的。
    
    
    优先级 	运算符
 7 		^ !
 6 		* / % << >> & &^
 5 		+ - | ^
 4 		== != < <= >= >
 3 		<-
 2 		&&
 1 		||
 
 Go 支持以下 2 种形式的字面值：

    解释字符串：

    该类字符串使用双引号括起来，其中的相关的转义字符将被替换，这些转义字符包括：
        \n：换行符
        \r：回车符
        \t：tab 键
        \u 或 \U：Unicode 字符
        \\：反斜杠自身

    非解释字符串：

    该类字符串使用反引号括起来，支持换行，例如：

      `This is a raw string \n` 中的 `\n\` 会被原样输出。

和 C/C++不一样，Go 中的字符串是根据长度限定，而非特殊字符\0。

string 类型的零值为长度为零的字符串，即空字符串 ""。
